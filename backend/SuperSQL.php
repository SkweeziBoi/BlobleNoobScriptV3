<?php
/*
 Author: Andrews54757
 License: MIT (https://github.com/ThreeLetters/SuperSQL/blob/master/LICENSE)
 Source: https://github.com/ThreeLetters/SQL-Library
 Build: v1.1.5
 Built on: 06/12/2017
*/

namespace SuperSQL;

class SQLResponse implements \ArrayAccess,\Iterator{public$result;public$affected;public$ind=0;public$error=false;public$outTypes;public$complete=true;public$stmt;function __construct($a,$b,$c,$d){if(!$b){$this->error=$a->errorInfo();}else{$this->outTypes=$c;if($d===0){$e=$a->fetchAll(\PDO::FETCH_ASSOC);if($c){foreach($e as$f=>&$g){$this->map($g,$c);}}$this->result=$e;}else if($d===1){$this->stmt=$a;$this->complete=false;$this->result=array();}$this->affected=$a->rowCount();}}function close(){$this->complete=true;if($this->stmt){$this->stmt->closeCursor();$this->stmt=null;}}private function fetchNextRow(){$a=$this->stmt->fetch(\PDO::FETCH_ASSOC);if($a){if($this->outTypes){$this->map($a,$this->outTypes);}array_push($this->result,$a);return$a;}else{$this->close();return false;}}private function fetchAll(){while($this->fetchNextRow()){}}private function map(&$a,&$b){foreach($b as$c=>$d){if(isset($a[$c])){switch($d){case 'int':$a[$c]=(int)$a[$c];break;case 'double':$a[$c]=(double)$a[$c];break;case 'string':$a[$c]=(string)$a[$c];break;case 'bool':$a[$c]=$a[$c]?true:false;break;case 'json':$a[$c]=json_decode($a[$c]);break;case 'object':$a[$c]=unserialize($a[$c]);break;}}}}function error(){return$this->error;}function getData($a=false){if(!$this->complete&&!$a)$this->fetchAll();return$this->result;}function rowCount(){return$this->affected;}function offsetSet($a,$b){}function offsetExists($a){return$this->offsetGet($a)===null?false:true;}function offsetUnset($a){}function offsetGet($a){if(is_int($a)){if(isset($this->result[$a])){return$this->result[$a];}else if(!$this->complete){while($this->fetchNextRow()){if(isset($this->result[$a]))return$this->result[$a];}}}return null;}function next(){if(isset($this->result[$this->ind])){return$this->result[$this->ind++];}else if(!$this->complete){$a=$this->fetchNextRow();$this->ind++;return$a;}else{return false;}}function rewind(){$this->ind=0;}function current(){return$this->result[$this->ind];}function key(){return$this->ind;}function valid(){return$this->offsetExists($this->ind);}}class SQLConnector{public$db;public$log=array();public$dev=false;function __construct($a,$b,$c){$this->db=new \PDO($a,$b,$c);}function query($a,$b=null,$c=null,$d=0){$e=$this->db->prepare($a);if($b)$f=$e->execute($b);else$f=$e->execute();if($this->dev)array_push($this->log,array($a,$b));if($d!==3){return new SQLResponse($e,$f,$c,$d);}else{return$e;}}function _query($a,$b,$c,$d=null,$e=0){$f=$this->db->prepare($a);if($this->dev)array_push($this->log,array($a,$b,$c));foreach($b as$g=>&$h){$f->bindParam($g+1,$h[0],$h[1]);}$i=$f->execute();if(!isset($c[0])){return new SQLResponse($f,$i,$d,$e);}else{$j=array();array_push($j,new SQLResponse($f,$i,$d,0));foreach($c as$g=>$k){foreach($k as$l=>&$m){$b[$l][0]=$m;}$i=$f->execute();array_push($j,new SQLResponse($f,$i,$d,0));}return$j;}}function close(){$this->db=null;}}class Parser{static function getArg(&$a){preg_match('/^(?:\[(.{2})\])(.*)/',$a,$b);if(isset($b[1])){$a=$b[2];return$b[1];}return false;}static function isRaw(&$a){if($a[0]==='#'){$a=substr($a,1);return true;}return false;}static function isSpecial($a){return$a==='json'||$a==='object';}static function append(&$a,$b,$c,$d){if(is_array($b)&&$d[$c][2]<5){$e=count($b);for($f=1;$f<$e;$f++){if(!isset($a[$f-1]))$a[$f-1]=array();$a[$f-1][$c]=$b[$f];}}}static function stripArgs(&$a){preg_match('/(?:\[.{2}\]){0,3}([^\[]*)/',$a,$b);return$b[1];}static function append2(&$a,$b,$c,&$d,$e=false){$f=count($c);if($e){self::recurse($d,$c[0],$b,'',$d,0);}for($g=1;$g<$f;$g++){if(!isset($a[$g-1]))$a[$g-1]=array();self::recurse($a[$g-1],$c[$g],$b,'',$d,1);}}private static function recurse(&$a,$b,$c,$d,$e,$f){foreach($b as$g=>$h){$g=self::stripArgs($g);$i=$g.'#'.$d;if(isset($c[$i]))$j=$c[$i];else$j=$c[$g];if(is_array($h)&&!self::isSpecial($e[$j][2])){if(isset($h[0])){foreach($h as$k=>$l){$k+=$j;if($f&&isset($a[$k]))trigger_error('Key collision: '.$g,E_USER_WARNING);$a[$k]=self::value($e[$k][2],$l);if($f)$a[$k]=$a[$k][0];}}else{self::recurse($a,$h,$c,$d.'/'.$g,$e,$f);}}else{if($f&&isset($a[$j]))trigger_error('Key collision: '.$g,E_USER_WARNING);$a[$j]=self::value($e[$j][2],$h);if($f)$a[$j]=$a[$j][0];}}}static function quote($a){preg_match('/([a-zA-Z0-9_]*)\.?([a-zA-Z0-9_]*)?/',$a,$b);if($b[2]!==''){return '`'.$b[1].'`.`'.$b[2].'`';}else{return '`'.$b[1].'`';}}static function quoteArray(&$a){foreach($a as&$b){$b=self::quote($b);}}static function table($a){if(is_array($a)){$b='';foreach($a as$c=>$d){$e=self::getType($d);if($c!==0)$b.=', ';$b.='`'.$d.'`';if($f)$b.=' AS `'.$e.'`';}return$b;}else{return '`'.$a.'`';}}static function value($a,$b){if(!$a)$a=gettype($b);$c=\PDO::PARAM_STR;if($a==='integer'||$a==='int'){$c=\PDO::PARAM_INT;$b=(int)$b;}else if($a==='string'||$a==='str'||$a==='double'){$b=(string)$b;}else if($a==='boolean'||$a==='bool'){$c=\PDO::PARAM_BOOL;$b=$b?'1':'0';}else if($a==='null'||$a==='NULL'){$c=\PDO::PARAM_NULL;$b=null;}else if($a==='resource'||$a==='lob'){$c=\PDO::PARAM_LOB;}else if($a==='json'){$b=json_encode($b);}else if($a==='object'){$b=serialize($b);}else{trigger_error('Invalid type '.$a,E_USER_WARNING);}return array($b,$c,$a);}static function getType(&$a){preg_match('/([^\[]*)(?:\[([^\]]*)\])?/',$a,$b);$a=$b[1];return isset($b[2])?$b[2]:false;}static function rmComments($a){preg_match('/([^#]*)/',$a,$b);return$b[1];}static function conditions($a,&$b,&$c=false,&$d=0,$e=false,$f=' AND ',$g=' = ',$h=''){$i=0;$j='';foreach($a as$k=>$l){if($e&&is_int($k))$k=$l;preg_match('/^(?<r>\#)?(?:(?:\[(?<a>.{2})\])(?:(?:\[(?<b>.{2})\])(?:\[(?<c>.{2})\])?)?)?(?<out>.*)/',$k,$m);$n=($m['r']==='#');$o=$m['a'];$k=$m['out'];$p=$f;$q=$g;$r=$n?false:self::getType($k);$s=is_array($l)&&!self::isSpecial($r);$t=$s&&!isset($l[0]);if($o&&($o==='||'||$o==='&&')){$p=($o==='||')?' OR ':' AND ';$o=$m['b'];if($s&&$o&&($o==='||'||$o==='&&')){$f=$p;$p=($o==='||')?' OR ':' AND ';$o=$m['c'];}}$u=false;$v=false;if($o&&$o!=='=='){if($o==='!='||$o==='>='||$o==='<='){$q=' '.$o.' ';}else if($o==='>>'){$q=' > ';}else if($o==='<<'){$q=' < ';}else if($o==='~~'){$q=' LIKE ';}else if($o==='!~'){$q=' NOT LIKE ';}else if($o==='><'||$o==='<>'){$u=true;}else if($s&&$o==='MM'){$v=$m['c']?$m['c']:$m['b'];$w=array('NN'=>'IN NATURAL LANGUAGE MODE','NQ'=>'IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION','BB'=>'IN BOOLEAN MODE','QQ'=>'WITH QUERY EXPANSION');$v=isset($w[$v])?' '.$w[$v]:'';}else{throw new \Exception('Invalid operator '.$o.' Available: ==,!=,>>,<<,>=,<=,~~,!~,<>,><');}}else if($t||$o==='==')$q=' = ';if(!$s)$f=$p;if($i!==0)$j.=$f;$x=self::rmComments($k);if(!$n)$x=self::quote($x);if($s){$j.='(';if($t){$j.=self::conditions($l,$b,$c,$d,$e,$p,$q,$h.'/'.$k);}else{if($c!==false&&!$n){$c[$k]=$d;$c[$k.'#'.$h]=$d++;}if($v!==false){$y=$l['keyword'];unset($l['keyword']);self::quoteArray($l);$j.='MATCH('.implode($l,', ').') AGAINST (?'.$v.')';array_push($b,self::value($r,$y));}else if($u){$d+=2;$j.=$x.($o==='<>'?'NOT':'').' BETWEEN ';if($n){$j.=$l[0].' AND '.$l[1];}else{$j.='? AND ?';array_push($b,self::value($r,$l[0]));array_push($b,self::value($r,$l[1]));}}else{$z=$e?$l[0]:count($l);for($aa=0;$aa<$z;$aa++){$ba=$e?'':$l[$aa];if($aa!==0)$j.=$p;++$d;$j.=$x.$q;if($n){$j.=$ba;}else{$j.='?';array_push($b,self::value($r,$ba));}}}}$j.=')';}else{$j.=$x.$q;if($n){$j.=$l;}else{$j.='?';array_push($b,self::value($r,$l));if($c!==false){$c[$k]=$d;$c[$k.'#'.$h]=$d++;}}}++$i;}return$j;}static function JOIN($a,&$b,&$c,&$d){foreach($a as$e=>&$f){$g=self::isRaw($e);$h=self::getArg($e);switch($h){case '<<':$b.=' RIGHT';break;case '>>':$b.=' LEFT';break;case '<>':$b.=' FULL';break;case '>~':$b.=' LEFT OUTER';break;}$b.=' JOIN `'.$e.'` ON ';if($g){$b.=$f;}else{$b.=self::conditions($f,$c,$i,$d);}}}static function WHERE(&$a,$b,&$c,&$d,&$e=0){$a.=' WHERE ';if(isset($b[0])){$f=isset($b[1][0]);$a.=self::conditions($b[0],$c,$g,$e,$f);self::append2($d,$g,$f?$b[1]:$b,$c,$f);}else{$a.=self::conditions($b,$c,$g,$e);}}static function columns($a,&$b,&$c){$d='';$e=$a[0][0];if($e==='D'||$e==='I'){if($a[0]==='DISTINCT'){$b.='DISTINCT ';array_splice($a,0,1);}else if(substr($a[0],0,11)==='INSERT INTO'){$b=$a[0].' '.$b;array_splice($a,0,1);}else if(substr($a[0],0,4)==='INTO'){$d=' '.$a[0].' ';array_splice($a,0,1);}}if(isset($a[0])){if($a[0]==='*'){array_splice($a,0,1);$b.='*';foreach($a as$f=>$g){$h=self::getType($g);$c[$g]=$h;}}else{foreach($a as$f=>$g){$i=self::isRaw($g);$j=$i?false:self::getType($g);$k=false;if($j){$k=$j;$l=self::getType($g);if($l){$h=$l;}else{if($k==='json'||$k==='object'||$k==='int'||$k==='string'||$k==='bool'||$k==='double'){$h=$k;$k=false;}else$h=false;}if($h){if(!$c)$c=array();$c[$k?$k:$g]=$h;}}if($f!==0){$b.=', ';}$b.=$i?$g:self::quote($g);if($k)$b.=' AS `'.$k.'`';}}}else$b.='*';$b.=$d;}static function SELECT($a,$b,$c,$d,$e){$f='SELECT ';$g=$h=array();$i=null;$j=0;if(!isset($b[0])){$f.='*';}else{self::columns($b,$f,$i);}$f.=' FROM '.self::table($a);if($d){self::JOIN($d,$f,$g,$j);}if(!empty($c)){self::WHERE($f,$c,$g,$h,$j);}if($e){if(is_int($e)){$f.=' LIMIT '.$e;}else if(is_string($e)){$f.=' '.$e;}else if(is_array($e)){if(isset($e[0])){$f.=' LIMIT '.(int)$e[0].' OFFSET '.(int)$e[1];}else{if(isset($e['GROUP'])){$f.=' GROUP BY ';if(is_string($e['GROUP'])){$f.=self::quote($e['GROUP']);}else{self::quoteArray($e['GROUP']);$f.=implode(', ',$e['GROUP']);}if(isset($e['HAVING'])){$f.=' HAVING '.(is_string($e['HAVING'])?$e['HAVING']:self::conditions($e['HAVING'],$g,$k,$j));}}if(isset($e['ORDER'])){$f.=' ORDER BY '.self::quote($e['ORDER']);}else if(isset($e['!ORDER'])){$f.=' ORDER BY '.self::quote($e['ORDER']).' DESC';}if(isset($e['LIMIT'])){$f.=' LIMIT '.(int)$e['LIMIT'];}if(isset($e['OFFSET'])){$f.=' OFFSET '.(int)$e['OFFSET'];}}}}return array($f,$g,$h,$i);}static function INSERT($a,$b,$c){$d='INSERT INTO '.self::table($a).' (';$e=$f=$g=array();$h='';$i=0;$j=isset($b[0]);$k=isset($b[1][0]);$l=$j?$b[0]:$b;foreach($l as$m=>$n){if($k)$m=$n;$o=self::isRaw($m);if($i){$d.=', ';$h.=', ';}else$i=1;if(!$o)$p=self::getType($m);if($k)$n=$b[1][0][$m];$d.='`'.$m.'`';if($o){$h.=$n;}else{$h.='?';$q=!$j&&(!$p||!self::isSpecial($p))&&is_array($n);array_push($e,self::value($p,$q?$n[0]:$n));if($j){$g[$m]=array($n,$p);}else if($q){self::append($f,$n,$i++,$e);}}}$d.=') VALUES ('.$h.')';if($j){if($k)$b=$b[1];unset($b[0]);foreach($b as$r){$d.=', ('.$h.')';foreach($g as$m=>$n){array_push($e,self::value($n[1],isset($r[$m])?$r[$m]:$n[0]));}}}if($c)$d.=' '.$c;return array($d,$e,$f);}static function UPDATE($a,$b,$c){$d='UPDATE '.self::table($a).' SET ';$e=$f=$g=array();$h=$i=0;$j=isset($b[0]);$k=$j?$b[0]:$b;$l=isset($b[1][0]);foreach($k as$m=>$n){if($l)$m=$n;$o=self::isRaw($m);if($i){$d.=', ';}else$i=1;if($o){$d.='`'.$m.'` = '.$n;}else{$p=self::getArg($m);$q=self::getType($m);if($l)$n=$b[1][0][$m];$d.='`'.$m.'` = ';if($p){$d.='`'.$m.'` ';switch($p){case '+=':$d.='+ ?';break;case '-=':$d.='- ?';break;case '/=':$d.='/ ?';break;case '*=':$d.='* ?';break;}}else$d.='?';$r=(!$q||!self::isSpecial($q))&&is_array($n);array_push($e,self::value($q,$r?$n[0]:$n));if($j){$g[$m]=$h++;}else if($r){self::append($f,$n,$h++,$e);}}}if($j)self::append2($f,$g,$l?$b[1]:$b,$e);if(!empty($c))self::WHERE($d,$c,$e,$f,$h);return array($d,$e,$f);}static function DELETE($a,$b){$c='DELETE FROM '.self::table($a);$d=$e=array();if(!empty($b)){self::WHERE($c,$b,$d,$e);}return array($c,$d,$e);}}class SuperSQL{public$con;function __construct($a,$b,$c){$this->con=new SQLConnector($a,$b,$c);}function SELECT($a,$b=array(),$c=array(),$d=null,$e=false){if((is_int($d)||is_string($d)||isset($d[0]))&&!$e){$e=$d;$d=null;}$f=Parser::SELECT($a,$b,$c,$d,$e);return$this->con->_query($f[0],$f[1],$f[2],$f[3],1);}function INSERT($a,$b,$c=null){$d=Parser::INSERT($a,$b,$c);return$this->con->_query($d[0],$d[1],$d[2]);}function UPDATE($a,$b,$c=array()){$d=Parser::UPDATE($a,$b,$c);return$this->con->_query($d[0],$d[1],$d[2]);}function DELETE($a,$b=array()){$c=Parser::DELETE($a,$b);return$this->con->_query($c[0],$c[1],$c[2]);}function query($a,$b=null,$c=null,$d=0){return$this->con->query($a,$b,$c,$d);}function close(){$this->con->close();}function dev(){$this->con->dev=true;}function getLog(){return$this->con->log;}function transact($a){$this->con->db->beginTransaction();try{$b=$a($this);}catch(\Exception$c){$this->con->db->rollBack();return false;}if($b===false)$this->con->db->rollBack();else$this->con->db->commit();return$b;}}class SQLHelper{public$s;public$connections;function __construct($a,$b=null,$c=null,$d=null,$e=array()){$this->connections=array();if(is_array($a)){if(is_array($a[0])){foreach($a as$f=>$g){$h=isset($g['host'])?$g['host']:'';$b=isset($g['db'])?$g['db']:'';$c=isset($g['user'])?$g['user']:'';$d=isset($g['password'])?$g['password']:'';$i=isset($g['options'])?$g['options']:array();$j=self::connect($h,$b,$c,$d,$i);array_push($this->connections,$j);}}else{foreach($a as$f=>$g){array_push($this->connections,$g);}}$this->s=$this->connections[0];}else if(is_string($a)){$this->s=self::connect($a,$b,$c,$d,$e);array_push($this->connections,$this->s);}else{array_push($this->connections,$a);$this->s=$a;}}static function connect($a,$b,$c,$d,$e=array()){$f='mysql';$g=false;if(is_string($e)){if(strpos($e,':')!==false){$g=$e;}else{$f=strtolower($e);}}else if(isset($e['dbtype']))$f=strtolower($e['dbtype']);if(!$g){$h='';switch($f){case 'pgsql':$h='pgsql';$i=array('dbname'=>$b,'host'=>$a);if(isset($e['port']))$i['port']=$e['port'];break;case 'sybase':$h='dblib';$i=array('dbname'=>$b,'host'=>$a);if(isset($e['port']))$i['port']=$e['port'];break;case 'oracle':$h='oci';$i=array('dbname'=>isset($a)?'//'.$a.':'.(isset($e['port'])?$e['port']:'1521').'/'.$b:$b);break;default:$h='mysql';$i=array('dbname'=>$b);if(isset($e['socket']))$i['unix_socket']=$e['socket'];else{$i['host']=$a;if(isset($e['port']))$i['port']=$e['port'];}break;}$g=$h.':';if(isset($e['charset'])){$i['charset']=$e['charset'];}$g=$h.':';$j=0;foreach($i as$k=>$l){if($j!=0){$g.=';';}$g.=$k.'='.$l;$j++;}}return new SuperSQL($g,$c,$d);}function escape($a){$b=strtolower(gettype($a));if($b=='boolean'){$a=$a?'1':'0';}else if($b=='string'){$a=$this->s->con->db->quote($a);}else if($b=='double'||$b=='integer'){$a=(int)$a;}else if($b=='null'){$a='0';}return$a;}function change($a){$this->s=$this->connections[$a];return$this->s;}function getCon($a=false){if($a){return$this->connections;}else{return$this->s;}}function get($a,$b=array(),$c=array(),$d=null){$e=$this->s->SELECT($a,$b,$c,$d,1)->getData();return($e&&$e[0])?$e[0]:false;}function create($a,$b){$c='CREATE TABLE `'.$a.'` (';$d=0;foreach($b as$e=>$f){if($d!=0){$c.=', ';}$c.='`'.$e.'` '.$f;$d++;}$c.=')';return$this->s->query($c);}function drop($a){return$this->s->query('DROP TABLE `'.$a.'`');}function replace($a,$b,$c=array()){$d=array();foreach($b as$e=>$f){$g='`'.Parser::rmComments($e).'`';foreach($f as$h=>$i){$g='REPLACE('.$g.', '.$this->escape($h).', '.$this->escape($i).')';}$d['#'.$e]=$g;}return$this->s->UPDATE($a,$d,$c);}function select($a,$b=array(),$c=array(),$d=null,$e=false){return$this->s->SELECT($a,$b,$c,$d,$e);}function insert($a,$b){return$this->s->INSERT($a,$b);}function update($a,$b,$c=array()){return$this->s->UPDATE($a,$b,$c);}function delete($a,$b=array()){return$this->s->DELETE($a,$b);}function sqBase($a,$b,$c){$d=0;$e=array();if($c){Parser::JOIN($c,$a,$e,$d);}if(count($b)!=0){$a.=' WHERE ';$a.=Parser::conditions($b,$e);}$f=$this->_query($a,$e);return$f[0]->fetchColumn();}function count($a,$b=array(),$c=array()){return$this->sqBase('SELECT COUNT(*) FROM `'.$a.'`',$b,$c);}function avg(){return$this->sqBase('SELECT AVG(`'.$column.'`) FROM `'.$table.'`',$a,$b);}function max($a,$b,$c=array(),$d=array()){return$this->sqBase('SELECT MAX(`'.$b.'`) FROM `'.$a.'`',$c,$d);}function min($a,$b,$c=array(),$d=array()){return$this->sqBase('SELECT MIN(`'.$b.'`) FROM `'.$a.'`',$c,$d);}function sum($a,$b,$c=array(),$d=array()){return$this->sqBase('SELECT SUM(`'.$b.'`) FROM `'.$a.'`',$c,$d);}function _query($a,$b){$c=$this->s->con->db->prepare($a);foreach($b as$d=>&$e){$c->bindParam($d+1,$e[0],$e[1]);}$f=$c->execute();return array($c,$f);}function query($a,$b=null){return$this->s->con->query($a,$b);}function transact($a){return$this->s->transact($a);}function selectMap($a,$b,$c=array(),$d=null,$e=false){$f=array();$g=array();function recurse($a,&$b,&$c,&$d){foreach($a as$e=>$f){if(is_int($e)){array_push($c,$f);$g=Parser::getType($f);if($g){$h=Parser::getType($f);if($h&&($h==='int'||$h==='bool'||$h==='string'||$h==='json'||$h==='object'||$h==='double')){$g=false;}}if($g){array_push($b,$g);}else{preg_match('/(?:[^\.]*\.)?(.*)/',$f,$i);array_push($b,$i[1]);}}else{$b[$e]=array();recurse($f,$b[$e],$c,$d);}}}recurse($j,$d,$c,$d);$k=$this->s->select($l,$c,$m,$n,$o);$p=$k->getData();function recurse2($a,$b,&$c){$c=array();foreach($a as$d=>$e){if(is_int($d)){$c[$e]=$b[$e];}else{recurse2($e,$b,$c[$d]);}}}$r->result=array();foreach($d as$f=>$b){recurse2($g,$b,$r->result[$f]);}return$r;}function info(){return array('server'=>$this->s->con->db->getAttribute(\PDO::ATTR_SERVER_INFO),'driver'=>$this->s->con->db->getAttribute(\PDO::ATTR_DRIVER_NAME),'client'=>$this->s->con->db->getAttribute(\PDO::ATTR_CLIENT_VERSION),'version'=>$this->s->con->db->getAttribute(\PDO::ATTR_SERVER_VERSION),'connection'=>$this->s->con->db->getAttribute(\PDO::ATTR_CONNECTION_STATUS));}function getLog(){$a=$this->s->getLog();$b=array();foreach($a as$c){$d=explode('?',$c[0]);$e='';foreach($d as$f=>$g){$e.=$g.(isset($c[1][$f])?$this->escape($c[1][$f][0]):'');}array_push($b,$e);if(isset($c[2])){foreach($c[2]as$h){foreach($h as$i=>$j){$c[1][$i][0]=$j;}$e='';foreach($d as$f=>$g){$e.=$g.(isset($c[1][$f])?$this->escape($c[1][$f][0]):'');}array_push($b,$e);}}}return$b;}function dev(){$this->s->dev();}}
?>
